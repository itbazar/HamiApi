// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250211134827_Add_PatientTomorTests_Models")]
    partial class Add_PatientTomorTests_Models
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRoleChart", b =>
                {
                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChartId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ApplicationRoleChart");
                });

            modelBuilder.Entity("ApplicationUserChart", b =>
                {
                    b.Property<Guid>("ChartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChartId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChart");
                });

            modelBuilder.Entity("CounselingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MentorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("PatientGroupId");

                    b.ToTable("CounselingSession");
                });

            modelBuilder.Entity("Domain.Models.ChartAggregate.Chart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ValidForMilliseconds")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("Domain.Models.Common.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Cipher")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("ComplaintContent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComplaintContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("IntegrityHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintContentId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CipherKeyCitizen")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("CipherKeyInspector")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Complaining")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ComplaintOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("EncryptionIv")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("EncryptionIvCitizen")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsFailed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ComplaintOrganizationId");

                    b.HasIndex("PublicKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.ComplaintCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplaintCategory");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.ComplaintContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Cipher")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("ComplaintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("IntegrityHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.ToTable("ComplaintContent");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.ComplaintOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplaintOrganization");
                });

            modelBuilder.Entity("Domain.Models.Hami.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnswerValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestPeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Domain.Models.Hami.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Domain.Models.Hami.MedicalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachedFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserMedicalInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserMedicalInfoId");

                    b.ToTable("MedicalEntry");
                });

            modelBuilder.Entity("Domain.Models.Hami.PatientGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiseaseType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Organ")
                        .HasColumnType("int");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.ToTable("PatientGroup");
                });

            modelBuilder.Entity("Domain.Models.Hami.PatientLabTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.Property<decimal>("TestValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PatientLabTest");
                });

            modelBuilder.Entity("Domain.Models.Hami.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecc379cf-0ef3-4498-a865-6c320369f66a"),
                            IsDeleted = false,
                            QuestionText = "داشتن احساس بی قراری، خشم، اضطراب، عصبانیت",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("d4debcde-5a59-4f3f-b568-b8375bc3a19f"),
                            IsDeleted = false,
                            QuestionText = "ناتوانی در توقف یا کنترل نگرانی",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("d061d84d-6dce-4d27-81fb-2f100a18a375"),
                            IsDeleted = false,
                            QuestionText = "نگرانی بیش از حد پیرامون مسائل مختلف",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("fbe74744-276c-4470-8aec-45488b1ae921"),
                            IsDeleted = false,
                            QuestionText = "اشکال در آرامش داشتن (عدم توانایی در حفظ آرامش خود)",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("34b900ca-53f3-4322-b06c-300e54f0cd95"),
                            IsDeleted = false,
                            QuestionText = "بی قراری شدید به حدی که نمی توانم بنشینم",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("1ea79543-e61a-4d7c-a4c5-d879da4d1f71"),
                            IsDeleted = false,
                            QuestionText = "به سهولت عصبی یا بی قرار می شوم",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("9b991b96-19e1-4f30-a699-56a977a20b34"),
                            IsDeleted = false,
                            QuestionText = "ترس این رو دارم که هر لحظه اتفاق بدی بیوفتد",
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("5b32abcf-3506-4ebc-959b-f2a941511ef5"),
                            IsDeleted = false,
                            QuestionText = "علاقه یا لذت کم در اجرای کار ها (علاقه یا لذت کمی برای انجام دادن کار ها دارم)",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("60c8f10d-0496-4254-b8c1-99ff0b662d8f"),
                            IsDeleted = false,
                            QuestionText = "احساس افسردگی، مود پایین یا نا امیدی دارم",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("249a84d8-64ad-4a41-b68f-7d0f175e9b92"),
                            IsDeleted = false,
                            QuestionText = "اختلال خواب (به سختی خواب میروم، در خواب بیدار می شوم و یا خیلی زیاد می خوابم)",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("3a55fbe0-b8f6-4f41-bca1-66e565b78442"),
                            IsDeleted = false,
                            QuestionText = "احساس خستگی، پایین بودن انرژی دارم",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("32d9f476-7bbc-4136-b899-4962982cca5c"),
                            IsDeleted = false,
                            QuestionText = "اختلال در اشتها (اشتهایم کم شده ویا زیاد غذا می خورم)",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("69a6b0fc-07a6-48e7-be89-62dac9bc198a"),
                            IsDeleted = false,
                            QuestionText = "احساس بدی نسبت به خود دارم، احساس شکست میکنم، احساس میکنم خودم یا خانواده ام را ناامید کرده ام",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("59b47353-e8b0-4f1f-a0da-53bdbc4ed8a0"),
                            IsDeleted = false,
                            QuestionText = "تمرکز در انجام کارها ندارم مثلا زمانی که مطالعه میکنم یا تلویزیون میبینم",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("5f76a2a9-eb8a-40af-ac55-d60d31bb82d7"),
                            IsDeleted = false,
                            QuestionText = "حرکات یا صحبت کردنم به قدری آهسته است که دیگران متوجه آن می شوند یا برعکس آنقدر بی قرارم که خیلی بیشتر از حد معمول در حرکتم",
                            TestType = 2
                        },
                        new
                        {
                            Id = new Guid("8dda7f6e-cc89-4638-8f48-2453b9240132"),
                            IsDeleted = false,
                            QuestionText = "افکاری در مورد مردن یا آسیب زدن به خود به سراغم می آید",
                            TestType = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Hami.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Domain.Models.Hami.TestPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NextOccurrence")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Recurrence")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestPeriod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = 101,
                            EndDate = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PeriodName = "ارزیابی اولیه GAD هنگام ثبت نام",
                            Recurrence = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = 102,
                            EndDate = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PeriodName = "ارزیابی اولیه MDD هنگام ثبت نام",
                            Recurrence = 0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestType = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Hami.TestPeriodResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TestInstance")
                        .HasColumnType("int");

                    b.Property<Guid>("TestPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestPeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("TestPeriodResult");
                });

            modelBuilder.Entity("Domain.Models.Hami.UserGroupMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupMembership");
                });

            modelBuilder.Entity("Domain.Models.Hami.UserMedicalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppetiteLevel")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseType")
                        .HasColumnType("int");

                    b.Property<float?>("InitialWeight")
                        .HasColumnType("real");

                    b.Property<int>("Organ")
                        .HasColumnType("int");

                    b.Property<string>("PathologyDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientStatus")
                        .HasColumnType("int");

                    b.Property<int?>("SleepDuration")
                        .HasColumnType("int");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedicalInfo");
                });

            modelBuilder.Entity("Domain.Models.IdentityAggregate.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FcmToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationStatus")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("VerificationSent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.News.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Domain.Models.PublicKeys.PublicKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InspectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.ToTable("PublicKey");
                });

            modelBuilder.Entity("Domain.Models.Sliders.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("Domain.Models.WebContents.WebContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebContent");
                });

            modelBuilder.Entity("LabTestRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TestType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LabTestRange");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SessionAttendanceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attended")
                        .HasColumnType("bit");

                    b.Property<Guid>("CounselingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MentorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CounselingSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionAttendanceLog");
                });

            modelBuilder.Entity("ApplicationRoleChart", b =>
                {
                    b.HasOne("Domain.Models.ChartAggregate.Chart", null)
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserChart", b =>
                {
                    b.HasOne("Domain.Models.ChartAggregate.Chart", null)
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CounselingSession", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("Domain.Models.Hami.PatientGroup", "PatientGroup")
                        .WithMany("Sessions")
                        .HasForeignKey("PatientGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("PatientGroup");
                });

            modelBuilder.Entity("Domain.Models.Common.Media", b =>
                {
                    b.HasOne("Domain.Models.ComplaintAggregate.ComplaintContent", null)
                        .WithMany("Media")
                        .HasForeignKey("ComplaintContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.Complaint", b =>
                {
                    b.HasOne("Domain.Models.ComplaintAggregate.ComplaintCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ComplaintAggregate.ComplaintOrganization", "ComplaintOrganization")
                        .WithMany()
                        .HasForeignKey("ComplaintOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PublicKeys.PublicKey", "PublicKey")
                        .WithMany("Complaints")
                        .HasForeignKey("PublicKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("Domain.Models.ComplaintAggregate.Password", "CitizenPassword", b1 =>
                        {
                            b1.Property<Guid>("ComplaintId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaint");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.OwnsOne("Domain.Models.ComplaintAggregate.Password", "EncryptionKeyPassword", b1 =>
                        {
                            b1.Property<Guid>("ComplaintId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("ComplaintId");

                            b1.ToTable("Complaint");

                            b1.WithOwner()
                                .HasForeignKey("ComplaintId");
                        });

                    b.Navigation("Category");

                    b.Navigation("CitizenPassword")
                        .IsRequired();

                    b.Navigation("ComplaintOrganization");

                    b.Navigation("EncryptionKeyPassword")
                        .IsRequired();

                    b.Navigation("PublicKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.ComplaintContent", b =>
                {
                    b.HasOne("Domain.Models.ComplaintAggregate.Complaint", null)
                        .WithMany("Contents")
                        .HasForeignKey("ComplaintId");
                });

            modelBuilder.Entity("Domain.Models.Hami.Answer", b =>
                {
                    b.HasOne("Domain.Models.Hami.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hami.TestPeriod", "TestPeriod")
                        .WithMany()
                        .HasForeignKey("TestPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("TestPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Hami.MedicalEntry", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Hami.UserMedicalInfo", "UserMedicalInfo")
                        .WithMany("MedicalEntries")
                        .HasForeignKey("UserMedicalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UserMedicalInfo");
                });

            modelBuilder.Entity("Domain.Models.Hami.PatientGroup", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Domain.Models.Hami.PatientLabTest", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Hami.TestPeriodResult", b =>
                {
                    b.HasOne("Domain.Models.Hami.TestPeriod", "TestPeriod")
                        .WithMany()
                        .HasForeignKey("TestPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("TestPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Hami.UserGroupMembership", b =>
                {
                    b.HasOne("Domain.Models.Hami.PatientGroup", "PatientGroup")
                        .WithMany("Members")
                        .HasForeignKey("PatientGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany("UserGroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Hami.UserMedicalInfo", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.News.News", b =>
                {
                    b.OwnsOne("Domain.Models.Common.StorageMedia", "Image", b1 =>
                        {
                            b1.Property<Guid>("NewsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("NewsId");

                            b1.ToTable("News");

                            b1.WithOwner()
                                .HasForeignKey("NewsId");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.PublicKeys.PublicKey", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("Domain.Models.Sliders.Slider", b =>
                {
                    b.OwnsOne("Domain.Models.Common.StorageMedia", "Image", b1 =>
                        {
                            b1.Property<Guid>("SliderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AlternateText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MediaType")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url3")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Url4")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SliderId");

                            b1.ToTable("Slider");

                            b1.WithOwner()
                                .HasForeignKey("SliderId");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SessionAttendanceLog", b =>
                {
                    b.HasOne("CounselingSession", "CounselingSession")
                        .WithMany("AttendanceLogs")
                        .HasForeignKey("CounselingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CounselingSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CounselingSession", b =>
                {
                    b.Navigation("AttendanceLogs");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.Complaint", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Domain.Models.ComplaintAggregate.ComplaintContent", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Domain.Models.Hami.PatientGroup", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Domain.Models.Hami.UserMedicalInfo", b =>
                {
                    b.Navigation("MedicalEntries");
                });

            modelBuilder.Entity("Domain.Models.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Navigation("UserGroupMemberships");
                });

            modelBuilder.Entity("Domain.Models.PublicKeys.PublicKey", b =>
                {
                    b.Navigation("Complaints");
                });
#pragma warning restore 612, 618
        }
    }
}
